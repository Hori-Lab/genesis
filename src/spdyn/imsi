87,88d86
<     use Ctim
< 
106c104
<     integer                  :: i, j, k, jx, nsteps, ii
---
>     integer                  :: i, j, k, jx, nsteps
110c108
<     logical                  :: npt, npt1
---
>     logical                  :: npt
112d109
<     integer,         pointer :: atmcls_pbc(:)
126c123
<     atmcls_pbc    => domain%atmcls_pbc
---
> 
145a143,144
>     XI_RESPA      => dynamics%xi_respa
>     XO_RESPA      => dynamics%xo_respa
166,169d164
< #ifdef PKTIMER
<       call timer_sta(291)
< #endif
< 
171c166
<                             domain%num_atom,        &
---
>                             domain%num_atom_all,    &
179,183d173
< #ifdef PKTIMER
<       call timer_end(291)
<       call timer_sta(292)
< #endif
< 
192,196d181
< #ifdef PKTIMER
<       call timer_end(292)
<       call timer_sta(293)
< #endif
< 
201,204d185
< #ifdef PKTIMER
<       call timer_end(293)
< #endif
< 
216,217c197
<                             dynvars%energy, atmcls_pbc,                  &
<                             coord_pbc, force_short,                      &
---
>                             dynvars%energy, coord_pbc, force_short,      &
235,252d214
<     call mpi_barrier(mpi_comm_country, ierror)
<     Timt=0.0d0
<     Timb=0.0d0
<     mpi_tot_tran=0.d0
< #ifdef PKTIMER
<     if (main_rank) &
<     write(6,*) '*** MainLoop in vverlet_respa_dynamics start *****'
<     call timer_bar(4)
<     call timer_sta(5)
< #ifdef FJ_PROF_FIPP
<     call fipp_start
< #endif
< #ifdef FJ_PROF_FAPP
<     !call start_collection("MainLoop")
<     call fapp_start("MainLoop",5,0)
< #endif
< #endif
< 
254a217,218
>     call timer(TimerDynamics, TimerOn)
> 
257,258d220
<       mpi_tran = 0.0_dp
<       mpi_bari = 0.0_dp
261c223
<       enefunc%rpath_sum_mf_flag = enefunc%rpath_flag
---
>        enefunc%rpath_sum_mf_flag = enefunc%rpath_flag
266,267c228,231
<         call output_md(output, dynamics, boundary, pairlist, ensemble, &
<                        constraints, dynvars, domain, enefunc, remd)
---
>         call output_md(output, dynamics, boundary, pairlist, &
>                        ensemble, dynvars, domain, enefunc, remd)
>         call output_prst_md(output, enefunc, dynamics, boundary, &
>                        dynvars, domain, constraints)
287,291c251
< #ifdef FJ_TIMER_2
<         call timer_sta(301)
< #endif
< 
<         call integrate_vv1(dynamics, istep, istart, j, dt_long, dt_short,  &
---
>         call integrate_vv1(dynamics, istep, istart, j, dt_long, dt_short, &
294,297d253
< #ifdef FJ_TIMER_2
<         call timer_end(301)
< #endif
< 
321a278
> 
324,336c281,282
< 
< #ifdef FJ_TIMER_2
<         call timer_sta(302)
< #endif
< 
<           call domain_interaction_update(istep, dynamics%nbupdate_period,     &
<                                          domain, enefunc, pairlist, boundary, &
<                                          constraints, comm)
< 
< #ifdef FJ_TIMER_2
<         call timer_end(302)
< #endif
< 
---
>           call domain_interaction_update_md(istep, dynamics, domain, enefunc, &
>                                           pairlist, boundary, constraints, comm)
350,354d295
< 
< #ifdef FJ_TIMER_2
<         call timer_sta(303)
< #endif
< 
356,360d296
< 
< #ifdef FJ_TIMER_2
<         call timer_end(303)
< #endif
< 
368,372d303
< 
< #ifdef FJ_TIMER_2
<         call timer_sta(304)
< #endif
< 
376d306
<                                     atmcls_pbc,                                &
384,387d313
< #ifdef FJ_TIMER_2
<         call timer_end(304)
< #endif
< 
390,394d315
< 
< #ifdef FJ_TIMER_2
<         call timer_sta(305)
< #endif
< 
396,400d316
< 
< #ifdef FJ_TIMER_2
<         call timer_end(305)
< #endif
< 
414,420d329
<           enefunc%rpath_sum_mf_flag = enefunc%rpath_flag
<           npt1 = npt .and. mod(istep,dynamics%baro_period)==0
< 
< #ifdef FJ_TIMER_2
<         call timer_sta(306)
< #endif
< 
422,423c331
<                               npt1,.false.,                                    &
<                               mod(istep,dynamics%eneout_period)==0,            &
---
>                               npt,.false.,mod(istep,dynamics%eneout_period)==0,&
427d334
<                               atmcls_pbc,                                      &
436,439d342
< #ifdef FJ_TIMER_2
<         call timer_end(306)
< #endif
< 
442,446d344
< 
< #ifdef FJ_TIMER_2
<         call timer_sta(307)
< #endif
< 
449,453d346
< 
< #ifdef FJ_TIMER_2
<         call timer_end(307)
< #endif
< 
467,471d359
< 
< #ifdef FJ_TIMER_2
<         call timer_sta(308)
< #endif
< 
475,478d362
< #ifdef FJ_TIMER_2
<         call timer_end(308)
< #endif
< 
481,548d364
<       ! FFT allgather
<       do ii=1,2
<         Timt(1)=Timt(1)+mpi_tran(ii,1)
<       enddo
<       ! FFT alltoall
<       do ii=1,10
<         Timt(2)=Timt(2)+mpi_tran(ii,2)
<         mpi_tot_tran(ii,2)=mpi_tot_tran(ii,2)+mpi_tran(ii,2)
<       enddo
<       !! coor
<       ! force
<       do ii=1,6
<         Timt(3)=Timt(3)+mpi_tran(ii,3)+mpi_tran(ii,4)+mpi_tran(ii,5)+mpi_tran(ii,6)
<       enddo
<       !! force
<       ! coor
<       do ii=1,6
<         Timt(4)=Timt(4)+mpi_tran(ii,7)+mpi_tran(ii,8)+mpi_tran(ii,9)+mpi_tran(ii,10)
<       enddo
<       ! thermo-barostat/bcast
<       do ii=1,4
<         Timt(5) = Timt(5)+mpi_tran(ii,11)
<       end do
<       ! thermo-barostat/allreduce
<       do ii=1,3
<         Timt(6) = Timt(6)+mpi_tran(ii,12)
<       end do
<       ! send-recev pre&post
<       do ii=1,24
<         Timt(7) = Timt(7)+mpi_tran(ii,20)
<         Timt(8) = Timt(8)+mpi_tran(ii,21)
<       end do
<       ! barrier FFT
<       do ii=1,9
<         Timb(1)=Timb(1)+mpi_bari(ii)
<       enddo
<       !! barrier coor
<       ! barrier force
<       Timb(2)=Timb(2)+mpi_bari(10)
<       !! barrier force
<       ! barrier coor
<       Timb(3)=Timb(3)+mpi_bari(11)
<       ! barrier thermo-barostat
<       do ii=12,19
<         Timb(4)=Timb(4)+mpi_bari(ii)
<       enddo
<       ! barrier prepost
<       do ii=20,25
<         Timb(5)=Timb(5)+mpi_bari(ii)
<       enddo
< 
<       call timer_set(41,Timt(4))   ! communicate_coor
<       call timer_set(42,Timt(3))   ! communicate_force
<       call timer_set(43,Timt(1))
<       call timer_set(44,Timt(2))
<       call timer_set(45,Timt(5))
<       call timer_set(46,Timt(6))
<       call timer_set(47,Timt(7))
<       call timer_set(48,Timt(8))
< 
<       call timer_set(51,Timb(1))
<       ! call timer_set(52,Timb(2))
<       ! call timer_set(53,Timb(3))
<       call timer_set(52,Timb(3))  ! barrier in coor
<       call timer_set(53,Timb(2))  ! barrier in force
<       call timer_set(54,Timb(4))
<       call timer_set(55,Timb(5))
< 
558,559c374,375
<     call output_md(output, dynamics, boundary, pairlist, ensemble, &
<                    constraints, dynvars, domain, enefunc, remd)
---
>     call output_md(output, dynamics, boundary, pairlist, &
>                    ensemble, dynvars, domain, enefunc, remd)
561,564c377,380
< !   ! output parallel I/O restart
< !   !
< !   call output_prst_md(output, enefunc, dynamics, boundary, &
< !                       dynvars, domain, constraints)
---
>     ! output parallel I/O restart
>     !
>     call output_prst_md(output, enefunc, dynamics, boundary, &
>                         dynvars, domain, constraints)
566,567c382,383
<     call integrate_vv1(dynamics, iend+1, istart, 1, dt_long, dt_short, ensemble, &
<                        domain, constraints, boundary, dynvars)
---
>     call integrate_vv1(dynamics, iend+1, istart, 1, dt_long, dt_short, &
>                        ensemble, domain, constraints, boundary, dynvars)
570,571d385
<     if (ensemble%tpcontrol == TpcontrolNHC) &
<       dynvars%nh_velocity(1:5) = dynvars%nh_velocity_ref(1:5) 
577,586c391
< #ifdef PKTIMER
<     call timer_end(5)
< #ifdef FJ_PROF_FIPP
<     call fipp_stop
< #endif
< #ifdef FJ_PROF_FAPP
<     !call stop_collection("MainLoop")
<     call fapp_stop("MainLoop",5,0)
< #endif
< #endif
---
>     call timer(TimerDynamics, TimerOff)
633d437
<     integer,         pointer :: atmcls_pbc(:)
650c454
<     atmcls_pbc    => domain%atmcls_pbc
---
> 
721,722c525
<                         dynvars%energy, atmcls_pbc,                     &
<                         coord_pbc, force_short,                         &
---
>                         dynvars%energy, coord_pbc, force_short,         &
829,830c632,634
<   subroutine integrate_vv1(dynamics, istep, istart, inner_step, dt_long, dt_short,   &
<                            ensemble, domain, constraints, boundary, dynvars)
---
>   subroutine integrate_vv1(dynamics, istep, istart, inner_step, dt_long, &
>                            dt_short, ensemble, domain, constraints,      &
>                            boundary, dynvars)
834,835c638
<     integer,                 intent(in)    :: istep
<     integer,                 intent(in)    :: istart
---
>     integer,                 intent(in)    :: istep, istart
867,868c670,671
<                                           dynamics, istep, istart, ensemble, domain, &
<                                           constraints, dynvars)
---
>                                           dynamics, istep, istart, ensemble, &
>                                           domain, constraints, dynvars)
882,883c685,686
<         call mtk_barostat_vv1(dynamics, istep, istart, dt_long, dt_short,    &
<                               ensemble, domain, constraints,         &
---
>         call mtk_barostat_vv1(dynamics, istep, istart, dt_long, dt_short, &
>                               ensemble, domain, constraints,              &
1044a848
>     dynvars%nh_velocity(1:5) = dynvars%nh_velocity_ref(1:5)
1088d891
<     real(dp),        pointer :: virial_long(:,:)
1108d910
<     virial_long => dynvars%virial_long
1158d959
<       virial(1:3,1:3) = virial(1:3,1:3) + virial_long(1:3,1:3)
1236,1237c1037
<     real(wip)                :: factor, vel_change(3)
<     real(dp)                 :: virial_constraint(3)
---
>     real(wip)                :: factor
1241c1041
<     real(wip),       pointer :: vel(:,:,:), vel_ref(:,:,:)
---
>     real(wip),       pointer :: vel(:,:,:)
1244c1044
<     real(dp),        pointer :: virial(:,:), viri_const(:,:)
---
>     real(dp),        pointer :: viri_const(:,:)
1255d1054
<     vel_ref     => domain%velocity_full
1258d1056
<     virial      => dynvars%virial
1321,1322c1119,1120
<                                           dynamics, istep, istart, ensemble, domain,  &
<                                           constraints, dynvars)
---
>                                           dynamics, istep, istart, ensemble,  &
>                                           domain, constraints, dynvars)
1329,1330c1127
<     integer,                 intent(in)    :: istep
<     integer,                 intent(in)    :: istart
---
>     integer,                 intent(in)    :: istep, istart
1353d1149
<     real(dp),        pointer :: virial_long(:,:)
1372d1167
<     virial_long => dynvars%virial_long
1390c1185,1186
<     calc_thermostat = mod(istep-1,dynamics%thermo_period) == 0 .and. istep > istart
---
>     calc_thermostat = mod(istep-1,dynamics%thermo_period) == 0 .and. &
>                       istep > istart
1513d1308
<       virial(1:3,1:3) = virial(1:3,1:3) + virial_long(1:3,1:3)
1534c1329
<   subroutine langevin_thermostat_vv1(dynamics, istep, inner_step, &
---
>   subroutine langevin_thermostat_vv1(dynamics, istep, istart, inner_step, &
1540c1335
<     integer,                  intent(in)    :: istep
---
>     integer,                  intent(in)    :: istep, istart
1883c1678
<   subroutine langevin_barostat_vv1(dynamics, istep, dt_long, dt_short,  &
---
>   subroutine langevin_barostat_vv1(dynamics, istep, istart, dt_long, dt_short, &
1889c1684
<     integer,                  intent(in)    :: istep
---
>     integer,                  intent(in)    :: istep, istart
2711,2714d2505
< #ifdef PKTIMER
<   use Ctim
< #endif
< 
2717,2718c2508
<     integer,                  intent(in)    :: istep
<     integer,                  intent(in)    :: istart
---
>     integer,                  intent(in)    :: istep, istart
2740,2741c2530,2531
<     real(wip)                :: size_scale(3), scale_b(3)
<     real(wip)                :: vel_scale(3)
---
>     real(wip)                :: size_scale(3), scale_b(3), vel_scale_2(3)
>     real(wip)                :: vel_scale(3), force_scale_2(3)
2745,2746c2535
<     integer                  :: ncell, nboundary, num_degree 
<     integer                  :: omp_get_thread_num, id
---
>     integer                  :: ncell, nboundary, num_degree
2755d2543
<     real(wp),        pointer :: trans_vec(:,:,:)
2762,2764d2549
< #ifdef PKTIMER
<     real(dp)                 :: st,et
< #endif
2795d2579
<     trans_vec   => domain%trans_vec
2817,2823d2600
< #ifdef PKTIMER
< #ifdef FJ_PROF_FAPP
<   call fapp_start("bussi_v1",31,0)
< #endif
<   call timer_sta(31)
< #endif
< 
2853,2890d2629
< #ifdef PKTIMER
< #ifdef FJ_PROF_FAPP
<   call fapp_stop ("bussi_v1",31,0)
< #endif
<   call timer_end(31)
< #endif
< 
<     ! From here, last part of VV2
<     !
< 
<     ! scale factor from barostat momentum
<     !
<     if (calc_elec_long .and. istep > 1) then
< 
< #ifdef PKTIMER
< #ifdef FJ_PROF_FAPP
<   call fapp_start("bussi_v1",31,0)
< #endif
<   call timer_sta(31)
< #endif
< 
<       gr = bmoment(1)+bmoment(2)+bmoment(3)
<       gr = gr/degree
<       scale_b(1:3) = bmoment(1:3) + gr
<       vel_scale(1:3) = exp(-scale_b(1:3)*half_dt_long)
< 
<       call update_vel_group_3d(constraints, ncell, nwater, water_list, &
<                                vel_scale, mass, vel)
< 
< #ifdef PKTIMER
< #ifdef FJ_PROF_FAPP
<   call fapp_stop ("bussi_v1",31,0)
< #endif
<   call timer_end(31)
< #endif
< 
<     end if
< 
2893,2899d2631
< #ifdef PKTIMER
< #ifdef FJ_PROF_FAPP
<   call fapp_start("bussi_v1",31,0)
< #endif
<   call timer_sta(31)
< #endif
< 
2912,2924c2644,2652
< #ifdef PKTIMER
< #ifdef FJ_PROF_FAPP
<   call fapp_stop ("bussi_v1",31,0)
< #endif
<   call timer_end(31)
< #endif
< 
<       call compute_kin_group(constraints, ncell, nwater, water_list, mass, &
<                              vel_half, kin_half, ekin_half)
<       call compute_kin_group(constraints, ncell, nwater, water_list, mass, &
<                              vel, kin_full, ekin_full)
< 
< 
---
>       if (ensemble%group_tp) then
>         call compute_kin_group(constraints, ncell, nwater, water_list, mass, &
>                                vel_half, kin_half, ekin_half)
>         call compute_kin_group(constraints, ncell, nwater, water_list, mass, &
>                                vel, kin_full, ekin_full)
>       else
>         call calc_kinetic(ncell, natom, mass, vel_half, kin_half, ekin_half)
>         call calc_kinetic(ncell, natom, mass, vel_ref , kin_half, ekin_half)
>       end if
2942,2943c2670,2681
<       call update_vel_group(constraints, ncell, nwater, water_list, &
<                             scale_vel, mass, vel)
---
>       if (ensemble%group_tp) then
>         call update_vel_group(constraints, ncell, nwater, water_list, &
>                               scale_vel, mass, vel)
>       else
>         do j = 1, ncell
>           do jx = 1, natom(j)
>             vel(1,jx,j) = vel(1,jx,j)*scale_vel
>             vel(2,jx,j) = vel(2,jx,j)*scale_vel
>             vel(3,jx,j) = vel(3,jx,j)*scale_vel
>           end do
>         end do
>       end if
2952,2953d2689
<     ! update barostat of last VV2 and first VV1 (combination)
<     !
2956,2962d2691
< #ifdef PKTIMER
< #ifdef FJ_PROF_FAPP
<   call fapp_start("bussi_v1",31,0)
< #endif
<   call timer_sta(31)
< #endif
< 
2979,2986d2707
< 
< #ifdef PKTIMER
< #ifdef FJ_PROF_FAPP
<   call fapp_stop ("bussi_v1",31,0)
< #endif
<   call timer_end(31)
< #endif
< 
2988,2996d2708
< 
< #ifdef PKTIMER
<       call gettod(st)
<       call mpi_barrier(mpi_comm_country,ierror)
<       call gettod(et)
<       mpi_bari(14)=mpi_bari(14)+(et-st)
<       call gettod(st)
< #endif
< 
2999,3002d2710
< 
< #ifdef PKTIMER
<       call gettod(et)
<       mpi_tran(3,12)=mpi_tran(3,12)+(et-st)
3004,3013d2711
< 
< #endif
< 
< #ifdef PKTIMER
< #ifdef FJ_PROF_FAPP
<   call fapp_start("bussi_v1",31,0)
< #endif
<   call timer_sta(31)
< #endif
< 
3024,3030d2721
< #ifdef PKTIMER
< #ifdef FJ_PROF_FAPP
<   call fapp_stop ("bussi_v1",31,0)
< #endif
<   call timer_end(31)
< #endif
< 
3033,3034d2723
<     ! from here, only VV1
<     !
3052,3060c2741,2752
< #ifdef PKTIMER
< #ifdef FJ_PROF_FAPP
<   call fapp_start("bussi_v1",31,0)
< #endif
<   call timer_sta(31)
< #endif
< 
<       call update_vel_group(constraints, ncell, nwater, water_list, &
<                             scale_vel, mass, vel)
---
>       if (ensemble%group_tp) then
>         call update_vel_group(constraints, ncell, nwater, water_list, &
>                               scale_vel, mass, vel)
>       else
>         do j = 1, ncell
>           do jx = 1, natom(j)
>             vel(1,jx,j) = vel(1,jx,j)*scale_vel
>             vel(2,jx,j) = vel(2,jx,j)*scale_vel
>             vel(3,jx,j) = vel(3,jx,j)*scale_vel
>           end do
>         end do
>       end if
3067,3073d2758
< #ifdef PKTIMER
< #ifdef FJ_PROF_FAPP
<   call fapp_stop ("bussi_v1",31,0)
< #endif
<   call timer_end(31)
< #endif
< 
3079,3104c2764
< 
< #ifdef PKTIMER
< #ifdef FJ_PROF_FAPP
<   call fapp_start("bussi_v1",31,0)
< #endif
<   call timer_sta(31)
< #endif
< 
<       ! scale factor from barostat momentum
<       !
<       gr = bmoment(1)+bmoment(2)+bmoment(3)
<       scale_b(1:3) = bmoment(1:3) + gr/degree
<       vel_scale(1:3) = exp(-scale_b(1:3)*half_dt_long)
< 
<       ! scale velocity
<       !
<       call update_vel_group_3d(constraints, ncell, nwater, water_list, &
<                             vel_scale, mass, vel)
< 
<       !$omp parallel private(j, jx, factor, id)
< #ifdef OMP
<       id = omp_get_thread_num()
< #else
<       id = 0
< #endif
<       do j = id+1, ncell, nthread
---
>       do j = 1, ncell
3112,3120d2771
<       !$omp end parallel 
< 
< #ifdef PKTIMER
< #ifdef FJ_PROF_FAPP
<   call fapp_stop ("bussi_v1",31,0)
< #endif
<   call timer_end(31)
< #endif
< 
3125,3130c2776,2783
< #ifdef PKTIMER
< #ifdef FJ_PROF_FAPP
<   call fapp_start("bussi_v1",31,0)
< #endif
<   call timer_sta(31)
< #endif
---
>     size_scale(1:3)  = exp(bmoment(1:3)*dt)
>     gr = bmoment(1)+bmoment(2)+bmoment(3)
>     scale_b(1:3) = bmoment(1:3) + gr/degree
>     vel_scale(1:3) = exp(-scale_b(1:3)*half_dt)
>     vel_scale_2(1:3) = exp(bmoment(1:3)*half_dt)
>     vel_scale_2(1:3) = vel_scale_2(1:3)*powersinh(bmoment(1:3)*half_dt)
>     force_scale_2(1:3) = exp(-scale_b(1:3)*quart_dt)
>     force_scale_2(1:3) = force_scale_2(1:3)*powersinh(scale_b(1:3)*quart_dt)
3132,3143c2785,2807
<     !$omp parallel private(j, jx, factor, id) 
< #ifdef OMP
<       id = omp_get_thread_num()
< #else
<       id = 0
< #endif
<     do j = id+1, ncell, nthread
<       do jx = 1, natom(j)
<         factor = half_dt * inv_mass(jx,j)
<         vel(1,jx,j) = vel(1,jx,j) + factor*force_short(1,jx,j)
<         vel(2,jx,j) = vel(2,jx,j) + factor*force_short(2,jx,j)
<         vel(3,jx,j) = vel(3,jx,j) + factor*force_short(3,jx,j)
---
>     if (ensemble%group_tp) then
> 
>       call compute_vv1_group(constraints, ncell, natom, nwater, water_list, &
>                              mass, inv_mass, force_short, coord_ref,        &
>                              size_scale,  vel_scale, dt, half_dt, coord, vel)
>     else
> 
>       do j = 1, ncell
>         do jx = 1, natom(j)
>           factor = half_dt * inv_mass(jx,j)
>           vel(1,jx,j) = vel_scale(1)*vel(1,jx,j) &
>                       + factor*force_scale_2(1)*force_short(1,jx,j)
>           vel(2,jx,j) = vel_scale(2)*vel(2,jx,j) &
>                       + factor*force_scale_2(2)*force_short(2,jx,j)
>           vel(3,jx,j) = vel_scale(3)*vel(3,jx,j) &
>                       + factor*force_scale_2(3)*force_short(3,jx,j)
>           coord(1,jx,j) = size_scale(1)*coord_ref(1,jx,j) &
>                         + dt*vel_scale_2(1)*vel(1,jx,j)
>           coord(2,jx,j) = size_scale(2)*coord_ref(2,jx,j) &
>                         + dt*vel_scale_2(2)*vel(2,jx,j)
>           coord(3,jx,j) = size_scale(3)*coord_ref(3,jx,j) &
>                         + dt*vel_scale_2(3)*vel(3,jx,j)
>         end do
3145,3157c2809,2810
<     end do
<     !$omp end parallel
<     size_scale(1:3)  = exp(bmoment(1:3)*half_dt)
<     call compute_vv1_coord_group(constraints, ncell, natom, nwater,       &
<                                  water_list, mass, inv_mass, force_short, &
<                                  coord_ref, vel, size_scale, dt, coord)
< 
< #ifdef PKTIMER
< #ifdef FJ_PROF_FAPP
<   call fapp_stop ("bussi_v1",31,0)
< #endif
<   call timer_end(31)
< #endif
---
> 
>     end if
3169,3175d2821
< #ifdef PKTIMER
< #ifdef FJ_PROF_FAPP
<   call fapp_start("bussi_v1",31,0)
< #endif
<   call timer_sta(31)
< #endif
< 
3185,3191d2830
< #ifdef PKTIMER
< #ifdef FJ_PROF_FAPP
<   call fapp_stop ("bussi_v1",31,0)
< #endif
<   call timer_end(31)
< #endif
< 
3195,3201d2833
< #ifdef PKTIMER
< #ifdef FJ_PROF_FAPP
<   call fapp_start("bussi_v1",31,0)
< #endif
<   call timer_sta(31)
< #endif
< 
3208,3214c2840
<     !$omp parallel private(j,jx,id)
< #ifdef OMP
<       id = omp_get_thread_num()
< #else
<       id = 0
< #endif
<     do j = id+1, ncell+nboundary, nthread
---
>     do j = 1, ncell+nboundary
3216,3218c2842
<         trans_vec(1,jx,j) = trans_vec(1,jx,j) * scale_b(1)
<         trans_vec(2,jx,j) = trans_vec(2,jx,j) * scale_b(2)
<         trans_vec(3,jx,j) = trans_vec(3,jx,j) * scale_b(3)
---
>         domain%trans_vec(1:3,jx,j) = domain%trans_vec(1:3,jx,j) * scale_b(1:3)
3221d2844
<     !$omp end parallel
3227,3233d2849
< #ifdef PKTIMER
< #ifdef FJ_PROF_FAPP
<   call fapp_stop ("bussi_v1",31,0)
< #endif
<   call timer_end(31)
< #endif
< 
3260,3263d2875
< #ifdef PKTIMER
<   use Ctim
< #endif
< 
3288d2899
<     integer                  :: omp_get_thread_num, id
3300,3303d2910
< #ifdef PKTIMER
<   real(8)  :: st,et
< #endif
< 
3343a2951,2952
>     dt_baro       = dt_short * real(dynamics%baro_period,wip)
>     half_dt_baro  = 0.5_wip * dt_baro
3348,3355d2956
< 
< #ifdef PKTIMER
< #ifdef FJ_PROF_FAPP
<   call fapp_start("bussi_v2",32,0)
< #endif
<   call timer_sta(32)
< #endif
< 
3357,3363c2958
<       !$omp parallel private(j,jx,id) reduction(+:cm)
< #ifdef OMP
<       id = omp_get_thread_num()
< #else
<       id = 0
< #endif
<       do j = id+1, ncell, nthread
---
>       do j = 1, ncell
3375,3391d2969
<       !$omp end parallel 
< 
< #ifdef PKTIMER
< #ifdef FJ_PROF_FAPP
<   call fapp_stop ("bussi_v2",32,0)
< #endif
<   call timer_end(32)
< #endif
< 
< #ifdef PKTIMER
<       call gettod(st)
<       call mpi_barrier(mpi_comm_country,ierror)
<       call gettod(et)
<       mpi_bari(15)=mpi_bari(15)+(et-st)
<       call gettod(st)
< #endif
< 
3394,3413c2972
< 
< #ifdef PKTIMER
<       call gettod(et)
<       mpi_tran(2,12)=mpi_tran(2,12)+(et-st)
< #endif
< 
< #ifdef PKTIMER
< #ifdef FJ_PROF_FAPP
<   call fapp_start("bussi_v2",32,0)
< #endif
<   call timer_sta(32)
< #endif
< 
<       !$omp parallel private(j,jx,id)
< #ifdef OMP
<       id = omp_get_thread_num()
< #else
<       id = 0
< #endif
<       do j = id+1, ncell, nthread
---
>       do j = 1, ncell
3423,3431d2981
<       !$omp end parallel 
< 
< #ifdef PKTIMER
< #ifdef FJ_PROF_FAPP
<   call fapp_stop ("bussi_v2",32,0)
< #endif
<   call timer_end(32)
< #endif
< 
3434,3440d2983
< #ifdef PKTIMER
< #ifdef FJ_PROF_FAPP
<   call fapp_start("bussi_v2",32,0)
< #endif
<   call timer_sta(32)
< #endif
< 
3444,3450c2987
<       !$omp parallel private(j,jx,factor,id)
< #ifdef OMP
<       id = omp_get_thread_num()
< #else
<       id = 0
< #endif
<       do j = id+1, ncell, nthread
---
>       do j = 1, ncell
3458d2994
<       !$omp end parallel 
3463,3469c2999
<     !$omp parallel private(j,jx,factor,id)
< #ifdef OMP
<       id = omp_get_thread_num()
< #else
<       id = 0
< #endif
<     do j = id+1, ncell, nthread
---
>     do j = 1, ncell
3477,3484d3006
<     !$omp end parallel
< 
< #ifdef PKTIMER
< #ifdef FJ_PROF_FAPP
<   call fapp_stop ("bussi_v2",32,0)
< #endif
<   call timer_end(32)
< #endif
3489,3503c3011
< 
< #ifdef PKTIMER
< #ifdef FJ_PROF_FAPP
<   call fapp_start("bussi_v2",32,0)
< #endif
<   call timer_sta(32)
< #endif
< 
<       !$omp parallel private(j,jx,id)
< #ifdef OMP
<       id = omp_get_thread_num()
< #else
<       id = 0
< #endif
<       do j = id+1, ncell, nthread
---
>       do j = 1, ncell
3513,3521d3020
<       !$omp end parallel
< 
< #ifdef PKTIMER
< #ifdef FJ_PROF_FAPP
<   call fapp_stop ("bussi_v2",32,0)
< #endif
<   call timer_end(32)
< #endif
< 
3525,3539c3024
< 
< #ifdef PKTIMER
< #ifdef FJ_PROF_FAPP
<   call fapp_start("bussi_v2",32,0)
< #endif
<   call timer_sta(32)
< #endif
< 
<       !$omp parallel private(j,jx,vel_change,id)
< #ifdef OMP
<       id = omp_get_thread_num()
< #else
<       id = 0
< #endif
<       do j = id+1, ncell, nthread
---
>       do j = 1, ncell
3549,3556d3033
<       !$omp end parallel
< 
< #ifdef PKTIMER
< #ifdef FJ_PROF_FAPP
<   call fapp_stop ("bussi_v2",32,0)
< #endif
<   call timer_end(32)
< #endif
3902,3905d3378
< #ifdef PKTIMER
<   use Ctim
< #endif
< 
3915,3924d3387
< #ifdef PKTIMER
<   real(8)  :: st,et
< #endif
< 
< #ifdef PKTIMER
< #ifdef FJ_PROF_FAPP
<   call fapp_start("bussi_v1",31,0)
< #endif
<   call timer_sta(31)
< #endif
3934,3941d3396
< 
< #ifdef PKTIMER
< #ifdef FJ_PROF_FAPP
<   call fapp_stop ("bussi_v1",31,0)
< #endif
<   call timer_end(31)
< #endif
< 
3943,3951d3397
< 
< #ifdef PKTIMER
<       call gettod(st)
<       call mpi_barrier(mpi_comm_country,ierror)
<       call gettod(et)
<       mpi_bari(13)=mpi_bari(13)+(et-st)
<       call gettod(st)
< #endif
< 
3953,3958d3398
< 
< #ifdef PKTIMER
<       call gettod(et)
<       mpi_tran(1,11)=mpi_tran(1,11)+(et-st)
< #endif
< 
4153,4156d3592
< #ifdef PKTIMER
<     use Ctim
< #endif
< 
4164,4166c3600
< #ifdef PKTIMER
<   real(8)  :: st,et
< #endif
---
> 
4172,4179d3605
< #ifdef PKTIMER
<       call gettod(st)
<       call mpi_barrier(mpi_comm_country,ierror)
<       call gettod(et)
<       mpi_bari(16)=mpi_bari(16)+(et-st)
<       call gettod(st)
< #endif
< 
4181,4185d3606
< 
< #ifdef PKTIMER
<       call gettod(et)
<       mpi_tran(2,11)=mpi_tran(2,11)+(et-st)
< #endif
